"""Used by the make system to generate version.h for use in code.
"""
from milc import cli

from qmk.constants import QMK_FIRMWARE
from qmk.path import normpath

from datetime import datetime

today = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')


@cli.argument('-o', '--output', arg_only=True, type=normpath, help='File to write to')
@cli.argument('-q', '--quiet', arg_only=True, action='store_true', help="Quiet mode, only output error messages")
@cli.argument('--force', arg_only=True, action='store_true', help='Overwrite if file already exists')
@cli.argument('--skip-git', arg_only=True, action='store_true', help='Skip Git operations')
@cli.argument('--skip-all', arg_only=True, action='store_true', help='Use placeholder values for all defines (implies --skip-git)')
@cli.subcommand('Used by the make system to generate version.h for use in code', hidden=True)
def generate_version_h(cli):
    """Generates the version.h file.
    """
    version_h_lines = ['/* This file was generated by `qmk generate-version-h`. Do not edit or copy.', ' */', '', '#pragma once', '']

    if cli.args.skip_all:
        cli.args.skip_git = True

    if cli.args.skip_git:
        qmk_version = 'NA'
        chibios_version = 'NA'
        chibios_contrib_version = 'NA'
    else:
        qmk_version = get_git_version()
        chibios_version = get_git_version('chibios')
        chibios_contrib_version = get_git_version('chibios-contrib')

    if cli.args.skip_all:
        build_date = '2020-01-01-00:00:00'
    else:
        build_date = today

    version_h_lines.append(f'#define QMK_VERSION "{qmk_version}"')
    version_h_lines.append(f'#define QMK_BUILDDATE "{build_date}"')
    version_h_lines.append(f'#define CHIBIOS_VERSION "{chibios_version}"')
    version_h_lines.append(f'#define CHIBIOS_CONTRIB_VERSION "{chibios_contrib_version}"')
    version_h = '\n'.join(version_h_lines)

    if cli.args.output:
        cli.args.output.parent.mkdir(parents=True, exist_ok=True)
        if cli.args.output.exists() and not cli.args.force:
            cli.args.output.replace(cli.args.output.parent / (cli.args.output.name) + '.bak')
        cli.args.output.write_text(version_h)

        if not cli.args.quiet:
            cli.log.info('Wrote version.h to %s', cli.args.output)

    else:
        print(version_h)


def get_git_version(submodule_name=None):
    """Get a version string using `git describe`, or the current build time.
       If submodule_name is specified, the target is the given submodule.
    """
    git_describe_cmd = ['git', 'describe', '--abbrev=6', '--dirty', '--always', '--tags']

    if submodule_name is not None:
        git_version = cli.run(git_describe_cmd, cwd=(QMK_FIRMWARE / 'lib' / submodule_name))
    else:
        git_version = cli.run(git_describe_cmd)

    if git_version.returncode != 0:
        return today

    return git_version.stdout.rstrip()
