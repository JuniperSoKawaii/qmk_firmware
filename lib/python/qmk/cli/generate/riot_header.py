"""Used by the make system to generate stuff from info.json
"""
from dotty_dict import dotty
from milc import cli

from qmk.decorators import automagic_keyboard
from qmk.info import info_json
from qmk.path import is_keyboard, normpath
from qmk.keyboard import keyboard_completer


@cli.argument('-o', '--output', arg_only=True, type=normpath, help='File to write to')
@cli.argument('-q', '--quiet', arg_only=True, action='store_true', help="Quiet mode, only output error messages")
@cli.argument('-kb', '--keyboard', completer=keyboard_completer, help='Keyboard to generate stuff for.')
@cli.subcommand('Used by the make system to generate riot stuff', hidden=True)
@automagic_keyboard
def generate_riot_header(cli):
    """Generates some riot stuff.
    """
    # Determine our keyboard(s)
    if not cli.config.generate_riot_header.keyboard:
        cli.log.error('Missing parameter: --keyboard')
        cli.subcommands['info'].print_help()
        return False

    if not is_keyboard(cli.config.generate_riot_header.keyboard):
        cli.log.error('Invalid keyboard: "%s"', cli.config.generate_riot_header.keyboard)
        return False

    # Build the Keyboard.h file.
    kb_info_json = dotty(info_json(cli.config.generate_riot_header.keyboard))

    keyboard_h_lines = ['/* This file was generated by `qmk generate-riot-header`. Do not edit or copy.', ' */', '', '#pragma once']
    keyboard_h_lines.append(f'#define CONFIG_USB_MANUF_STR "{kb_info_json["manufacturer"]}"')
    keyboard_h_lines.append(f'#define CONFIG_USB_PRODUCT_STR "{kb_info_json["keyboard_name"]}"')
    keyboard_h_lines.append(f'#define CONFIG_USB_VID {kb_info_json["usb.vid"]}')
    keyboard_h_lines.append(f'#define CONFIG_USB_PID {kb_info_json["usb.pid"]}')
    keyboard_h_lines.append(f'#define CONFIG_USB_BCD {kb_info_json["usb.device_ver"]}')
    keyboard_h_lines.append(f'#define CONFIG_USB_MAX_POWER 500')
    keyboard_h_lines.append(f'//#CONFIG_USB_SPEC_BCDVERSION_1_1')
    keyboard_h_lines.append(f'//#CONFIG_USBUS_EP0_SIZE_8')

#     # Show the results
    keyboard_h = '\n'.join(keyboard_h_lines)

    if cli.args.output:
        cli.args.output.parent.mkdir(parents=True, exist_ok=True)
        if cli.args.output.exists():
            cli.args.output.replace(cli.args.output.parent / (cli.args.output.name + '.bak'))
        cli.args.output.write_text(keyboard_h)

        if not cli.args.quiet:
            cli.log.info('Wrote Keyboard.h to %s.', cli.args.output)

    else:
        print(keyboard_h)
