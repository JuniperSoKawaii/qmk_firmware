"""Functions that help you work with QMK keymaps.
"""
import os
from pathlib import Path

import qmk.path
import qmk.makefile

# The `keymap.c` template to use when a keyboard doesn't have its own
DEFAULT_KEYMAP_C = """#include QMK_KEYBOARD_H

/* THIS FILE WAS GENERATED!
 *
 * This file was generated by qmk-compile-json. You may or may not want to
 * edit it directly.
 */

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
__KEYMAP_GOES_HERE__
};

void encoder_update_user(uint8_t index, bool clockwise) {
__ENCODERS_GO_HERE__
};
"""

ENCODER_IF = """\t_ELIF_ (index == _INDEX_) {
\t\tif (clockwise) {
\t\t\ttap_code16(_CLOCKWISE_);
\t\t} else {
\t\t\ttap_code16(_COUNTER_);
\t\t}
\t}
"""


def template(keyboard):
    """Returns the `keymap.c` template for a keyboard.

    If a template exists in `keyboards/<keyboard>/templates/keymap.c` that
    text will be used instead of `DEFAULT_KEYMAP_C`.

    Args:
        keyboard
            The keyboard to return a template for.
    """
    template_file = Path('keyboards/%s/templates/keymap.c' % keyboard)

    if template_file.exists():
        return template_file.read_text()

    return DEFAULT_KEYMAP_C


def generate(keyboard, layout, layers, encoders=None):
    """Returns a keymap.c for the specified keyboard, layout, and layers.

    Args:
        keyboard
            The name of the keyboard

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        encoders
            An array of encoders on the keyboard, if any. Each item includes the index and the counter- and clockwise key codes.
    """
    layer_txt = []
    for layer_num, layer in enumerate(layers):
        if layer_num != 0:
            layer_txt[-1] = layer_txt[-1] + ','
        layer_keys = ', '.join(layer)
        layer_txt.append('\t[%s] = %s(%s)' % (layer_num, layout, layer_keys))

    keymap = '\n'.join(layer_txt)
    keymap_c = template(keyboard)

    keymap_c = keymap_c.replace('__KEYMAP_GOES_HERE__', keymap)

    encoder_func = ''
    if encoders:
        encoders_txt = []
        for encoder_set in encoders:
            curr_encoder = ENCODER_IF.replace('_ELIF_', 'if' if encoder_set.get('index') == 0 else 'else if')
            curr_encoder = curr_encoder.replace('_INDEX_', str(encoder_set.get('index')))

            clockwise = parse_basic_code(encoder_set.get('clockwise'))
            counter = parse_basic_code(encoder_set.get('counter'))

            curr_encoder = curr_encoder.replace('_CLOCKWISE_', clockwise)
            curr_encoder = curr_encoder.replace('_COUNTER_', counter)

            encoders_txt.append(curr_encoder)

        encoder_func = '\n'.join(encoders_txt)[:-1]

    keymap_c = keymap_c.replace('__ENCODERS_GO_HERE__', encoder_func)
    return keymap_c


def parse_basic_code(keycode):
    """Performs a simplistic check for a 'basic' keycode. Otherwise it returns 'KC_NO'
    
    Args:
        keycode
            The keycode the user is trying to apply
    """
    return keycode if keycode[:2].lower() == 'kc' else 'KC_NO'


def write(keyboard, keymap, layout, layers, encoders=None):
    """Generate the `keymap.c` and write it to disk.

    Returns the filename written to.

    Args:
        keyboard
            The name of the keyboard

        keymap
            The name of the keymap

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        encoders
            An array of encoders on the keyboard. Each item includes the index and the counter- and clockwise key codes.
    """
    keymap_c = generate(keyboard, layout, layers, encoders)
    keymap_file = qmk.path.keymap(keyboard) / keymap / 'keymap.c'

    keymap_file.parent.mkdir(parents=True, exist_ok=True)
    keymap_file.write_text(keymap_c)

    return keymap_file


def list_keymaps(keyboard_name):
    """ List the available keymaps for a keyboard.

    Args:
        keyboard_name: the keyboards full name with vendor and revision if necessary, example: clueboard/66/rev3

    Returns:
        a set with the names of the available keymaps
    """
    # parse all the rules.mk files for the keyboard
    rules_mk = qmk.makefile.get_rules_mk(keyboard_name)
    names = set()

    if rules_mk:
        # qmk_firmware/keyboards
        keyboards_dir = Path.cwd() / "keyboards"
        # path to the keyboard's directory
        kb_path = keyboards_dir / keyboard_name
        # walk up the directory tree until keyboards_dir
        # and collect all directories' name with keymap.c file in it
        while kb_path != keyboards_dir:
            keymaps_dir = kb_path / "keymaps"
            if keymaps_dir.exists():
                names = names.union([keymap for keymap in os.listdir(str(keymaps_dir)) if (keymaps_dir / keymap / "keymap.c").is_file()])
            kb_path = kb_path.parent

        # if community layouts are supported, get them
        if "LAYOUTS" in rules_mk:
            for layout in rules_mk["LAYOUTS"].split():
                cl_path = Path.cwd() / "layouts" / "community" / layout
                if cl_path.exists():
                    names = names.union([keymap for keymap in os.listdir(str(cl_path)) if (cl_path / keymap / "keymap.c").is_file()])

    return sorted(names)
