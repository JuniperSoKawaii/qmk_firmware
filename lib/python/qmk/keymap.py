"""Functions that help you work with QMK keymaps.
"""
import os

import qmk.path

# The `keymap.c` template to use when a keyboard doesn't have its own
DEFAULT_KEYMAP_C = """#include QMK_KEYBOARD_H

/* THIS FILE WAS GENERATED!
 *
 * This file was generated by qmk-compile-json. You may or may not want to
 * edit it directly.
 */

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
__KEYMAP_GOES_HERE__
};
"""

DEFAULT_KEYMAP_ENCODERS_C = """#include QMK_KEYBOARD_H

/* THIS FILE WAS GENERATED AND IS EXPERIMENTAL!
 *
 * This file was generated by qmk-compile-json. You may or may not want to
 * edit it directly.
 */

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
__KEYMAP_GOES_HERE__
};

void encoder_update_user(uint8_t index, bool clockwise) {
__ENCODERS_GO_HERE__
};
"""

ENCODER_IF = """\t_ELIF_ (index == _INDEX_) {
\t\tif (clockwise) {
\t\t\ttap_code(_CLOCKWISE_);
\t\t} else {
\t\t\ttap_code(_COUNTER_);
\t\t}
\t}
"""


def template(keyboard, experimental=False):
    """Returns the `keymap.c` template for a keyboard.

    If a template exists in `keyboards/<keyboard>/templates/keymap.c` that
    text will be used instead of `DEFAULT_KEYMAP_C`.

    Args:
        keyboard
            The keyboard to return a template for.

        experimental
            True if the user wants to attempt compilation with encoder support
    """
    template_name = 'keyboards/%s/templates/keymap.c' % keyboard

    if os.path.exists(template_name):
        with open(template_name, 'r') as fd:
            return fd.read()

    if experimental:
        return DEFAULT_KEYMAP_ENCODERS_C
    return DEFAULT_KEYMAP_C


def generate(keyboard, layout, layers, encoders=None, experimental=False):
    """Returns a keymap.c for the specified keyboard, layout, and layers.

    Args:
        keyboard
            The name of the keyboard

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        encoders
            EXPERIMENTAL
            An array of encoders on the keyboard. Each item includes the index and the counter- and clockwise key codes.

        experimental
            True if the user wants to attempt compilation with encoder support
    """
    layer_txt = []
    for layer_num, layer in enumerate(layers):
        if layer_num != 0:
            layer_txt[-1] = layer_txt[-1] + ','
        layer_keys = ', '.join(layer)
        layer_txt.append('\t[%s] = %s(%s)' % (layer_num, layout, layer_keys))

    keymap = '\n'.join(layer_txt)
    keymap_c = template(keyboard, experimental)

    keymap_c = keymap_c.replace('__KEYMAP_GOES_HERE__', keymap)

    if experimental:
        encoder_function = ''
        if encoders is not None:
            encoders_txt = []
            for encoder_set in encoders:
                elif_str = "else if"
                if encoder_set['index'] == 0:
                    elif_str = "if"

                curr_encoder = ENCODER_IF.replace('_ELIF_', elif_str)
                curr_encoder = curr_encoder.replace('_INDEX_', str(encoder_set['index']))
                curr_encoder = curr_encoder.replace('_CLOCKWISE_', encoder_set['clockwise'])
                curr_encoder = curr_encoder.replace('_COUNTER_', encoder_set['counter'])
                encoders_txt.append(curr_encoder)
            encoder_function = '\n'.join(encoders_txt)

        keymap_c = keymap_c.replace('__ENCODERS_GO_HERE__', encoder_function)

    return keymap_c


def write(keyboard, keymap, layout, layers, encoders=None, experimental=False):
    """Generate the `keymap.c` and write it to disk.

    Returns the filename written to.

    Args:
        keyboard
            The name of the keyboard

        keymap
            The name of the keymap

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        encoders
            EXPERIMENTAL
            An array of encoders on the keyboard. Each item includes the index and the counter- and clockwise key codes.

        experimental
            True if the user wants to attempt compilation with encoder support
    """
    keymap_c = generate(keyboard, layout, layers, encoders, experimental)
    keymap_path = qmk.path.keymap(keyboard)
    keymap_dir = os.path.join(keymap_path, keymap)
    keymap_file = os.path.join(keymap_dir, 'keymap.c')

    if not os.path.exists(keymap_dir):
        os.makedirs(keymap_dir)

    with open(keymap_file, 'w') as keymap_fd:
        keymap_fd.write(keymap_c)

    return keymap_file
