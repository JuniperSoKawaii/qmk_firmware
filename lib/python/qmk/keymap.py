"""Functions that help you work with QMK keymaps.
"""
import os
from pathlib import Path
import json

import qmk.path
import qmk.makefile

# The `keymap.c` template to use when a keyboard doesn't have its own
DEFAULT_KEYMAP_C = """#include QMK_KEYBOARD_H

/* THIS FILE WAS GENERATED!
 *
 * This file was generated by qmk-compile-json. You may or may not want to
 * edit it directly.
 */

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
__KEYMAP_GOES_HERE__
};
"""


def template(keyboard, type='c'):
    """Returns the `keymap.c` or `keymap.json` template for a keyboard.

    If a template exists in `keyboards/<keyboard>/templates/keymap.c` that
    text will be used instead of `DEFAULT_KEYMAP_C`.

    If a template exists in `keyboards/<keyboard>/templates/keymap.json` that
    text will be used instead of an empty dictionary.

    Args:
        keyboard
            The keyboard to return a template for.

        type
            'json' for `keymap.json` and 'c' (or anything else) for `keymap.c`
    """
    if type == 'json':
        template_file = Path('keyboards/%s/templates/keymap.json' % keyboard)
        if template_file.exists():
            template = json.loads(template_file.read_text())
        else:
            template = {'keyboard': keyboard}
    else:
        template_file = Path('keyboards/%s/templates/keymap.c' % keyboard)
        if template_file.exists():
            template = template_file.read_text()
        else:
            template = DEFAULT_KEYMAP_C

    return template


def generate(keyboard, layout, layers, type='c'):
    """Returns a `keymap.c` or `keymap.json` for the specified keyboard, layout, and layers.

    Args:
        keyboard
            The name of the keyboard

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        type
            'json' for `keymap.json` and 'c' (or anything else) for `keymap.c`
    """
    new_keymap = template(keyboard, type)
    if type == 'json':
        new_keymap['layout'] = layout
        new_keymap['layers'] = layers
    else:
        layer_txt = []
        for layer_num, layer in enumerate(layers):
            if layer_num != 0:
                layer_txt[-1] = layer_txt[-1] + ','
            layer_keys = ', '.join(layer)
            layer_txt.append('\t[%s] = %s(%s)' % (layer_num, layout, layer_keys))

        keymap = '\n'.join(layer_txt)
        new_keymap = new_keymap.replace('__KEYMAP_GOES_HERE__', keymap)

    return new_keymap


def write(keyboard, keymap, layout, layers, type='c'):
    """Generate the `keymap.c` and write it to disk.

    Returns the filename written to.

    Args:
        keyboard
            The name of the keyboard

        keymap
            The name of the keymap

        layout
            The LAYOUT macro this keymap uses.

        layers
            An array of arrays describing the keymap. Each item in the inner array should be a string that is a valid QMK keycode.

        type
            'json' for `keymap.json` and 'c' (or anything else) for `keymap.c`
    """
    keymap_content = generate(keyboard, layout, layers, type)
    if type == 'json':
        keymap_file = qmk.path.keymap(keyboard) / keymap / 'keymap.json'
        keymap_content = json.dumps(keymap_content)
    else:
        keymap_file = qmk.path.keymap(keyboard) / keymap / 'keymap.c'

    keymap_file.parent.mkdir(parents=True, exist_ok=True)
    keymap_file.write_text(keymap_content)

    return keymap_file


def list_keymaps(keyboard_name):
    """ List the available keymaps for a keyboard.

    Args:
        keyboard_name: the keyboards full name with vendor and revision if necessary, example: clueboard/66/rev3

    Returns:
        a set with the names of the available keymaps
    """
    # parse all the rules.mk files for the keyboard
    rules_mk = qmk.makefile.get_rules_mk(keyboard_name)
    names = set()

    if rules_mk:
        # qmk_firmware/keyboards
        keyboards_dir = Path.cwd() / "keyboards"
        # path to the keyboard's directory
        kb_path = keyboards_dir / keyboard_name
        # walk up the directory tree until keyboards_dir
        # and collect all directories' name with keymap.c file in it
        while kb_path != keyboards_dir:
            keymaps_dir = kb_path / "keymaps"
            if keymaps_dir.exists():
                names = names.union([keymap for keymap in os.listdir(str(keymaps_dir)) if (keymaps_dir / keymap / "keymap.c").is_file() or (keymaps_dir / keymap / "keymap.json").is_file()])
            kb_path = kb_path.parent

        # if community layouts are supported, get them
        if "LAYOUTS" in rules_mk:
            for layout in rules_mk["LAYOUTS"].split():
                cl_path = Path.cwd() / "layouts" / "community" / layout
                if cl_path.exists():
                    names = names.union([keymap for keymap in os.listdir(str(cl_path)) if (cl_path / keymap / "keymap.c").is_file() or (keymaps_dir / keymap / "keymap.json").is_file()])

    return sorted(names)
