#include "kb.h"

/*#define _BASE 0
#define _SFT 1
#define _CALC 2
#define _CALC_SFT 3
#define _PCNT 4
#define _PNCT_SFT 5
#define _LANG 6
#define _LANG_SFT 7
#define _GAME 8
#define _MOUSE 9
*/

enum my_keycodes {
  GREEK = SAFE_RANGE,
  SYMBOL,
	MATH,
	GAME,
	MOUSE
};

enum unicode_name {
//<enum/>
};

const uint32_t PROGMEM unicode_map[] = {
//<uc_map/>
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

//<keymaps/>
};


const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
/*	keyevent_t event = record->event;
	switch (id) {}
*/	return MACRO_NONE;
}

void matrix_init_user(void) {
	set_unicode_input_mode(UC_WINC);
}

void matrix_scan_user(void) {}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
	switch (keycode) {
		case GREEK:
			if (record->event.pressed) {
				layer_invert(12);
				layer_off(16);
				layer_off(18);
				layer_off(23);
				layer_off(24);
			} else {
				// Do something else when release
			}
			return false; // Skip all further processing of this key
		case SYMBOL:
			if (record->event.pressed) {
				layer_off(12);
				layer_invert(16);
				layer_off(18);
				layer_off(23);
				layer_off(24);
			} else {
				// Do something else when release
			}
			return false; // Skip all further processing of this key
		case MATH:
			if (record->event.pressed) {
				layer_off(12);
				layer_off(16);
				layer_invert(18);
				layer_off(23);
				layer_off(24);
			} else {
				// Do something else when release
			}
			return false; // Skip all further processing of this key
		case GAME:
			if (record->event.pressed) {
				layer_off(12);
				layer_off(16);
				layer_off(18);
				layer_invert(23);
				layer_off(24);
			} else {
				// Do something else when release
			}
			return false; // Skip all further processing of this key
		case MOUSE:
			if (record->event.pressed) {
				layer_off(12);
				layer_off(16);
				layer_off(18);
				layer_off(23);
				layer_invert(24);
			} else {
				// Do something else when release
			}
			return false; // Skip all further processing of this key
		default:
			return true; // Process all other keycodes normally
	}
}

uint32_t layer_state_set_user(uint32_t state) {
  state = update_tri_layer_state(state, 1, 2, 3);
  state = update_tri_layer_state(state, 1, 4, 5);
  state = update_tri_layer_state(state, 1, 6, 7);
  state = update_tri_layer_state(state, 1, 8, 9);
  state = update_tri_layer_state(state, 2, 8, 10);
  state = update_tri_layer_state(state, 1, 10, 11);
  state = update_tri_layer_state(state, 1, 12, 13);
  state = update_tri_layer_state(state, 2, 12, 14);
  state = update_tri_layer_state(state, 1, 14, 15);
  state = update_tri_layer_state(state, 1, 16, 17);
  state = update_tri_layer_state(state, 1, 18, 19);
  state = update_tri_layer_state(state, 4, 18, 20);
  state = update_tri_layer_state(state, 1, 20, 21);
  state = update_tri_layer_state(state, 2, 21, 22);
  return state;
}

void led_set_user(uint8_t usb_led) {
	if (usb_led & (1 << USB_LED_NUM_LOCK)) {} else {}

	if (usb_led & (1 << USB_LED_CAPS_LOCK)) {} else {}

	if (usb_led & (1 << USB_LED_SCROLL_LOCK)) {
		DDRB |= (1 << 6); PORTB &= ~(1 << 6);
	} else {
		DDRB &= ~(1 << 6); PORTB &= ~(1 << 6);
	}

	if (usb_led & (1 << USB_LED_COMPOSE)) {} else {}

	if (usb_led & (1 << USB_LED_KANA)) {} else {}
}
