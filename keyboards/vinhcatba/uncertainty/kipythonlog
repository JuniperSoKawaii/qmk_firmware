Py 0.9.8
Python 3.9.10 (main, Jul 19 2022, 05:36:50) [MSC v.1932 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
Startup script executed: C:\Users\ADMIN\AppData\Roaming\kicad\6.0\PyShell_pcbnew_startup.py

import pcbnew
pcbnew.GetBoard()
<pcbnew.BOARD; proxy of <Swig Object of type 'BOARD *' at 0x00000218599DEBA0> >
myboard = pcbnew.GetBoard()
for fp in myboard.GetFootprints():
    print(fp.GetReference())

D88
SW52
D83
D47
C4
SW91
SW65
SW14
SW53
D42
D78
SW4
SW25
D45
D23
D33
C11
SW36
D24
SW37
SW33
SW74
REF**
D5
D90
SW81
D86
SW13
SW92
D15
D70
SW93
D114
D63
SW72
D93
SW58
D29
D40
D84
SW76
D3
REF**
D37
D95
D52
SW21
D76
SW90
D39
J1
D1
D46
SW85
D55
D21
SW17
D34
SW57
SW43
D98
SW12
SW38
SW47
D92
D58
D8
SW97
SW35
SW102
D18
D74
SW56
SW34
SW11
D91
SW103
SW45
D73
D49
D32
SW78
C7
SW46
D44
D87
SW66
REF**
SW42
SW55
D51
SW61
C6
R4
D61
D14
SW101
D20
D97
SW9
D67
SW50
D59
C5
SW68
SW63
SW77
C3
D77
SW6
C1
D30
C2
D57
SW89
SW86
SW3
REF**
SW75
SW40
D27
D85
SW39
SW8
SW87
D19
SW31
D82
D100
U1
D17
SW20
SW62
SW71
SW99
D115
D9
D105
SW29
D72
D68
SW24
SW60
SW22
D13
SW26
SW30
SW100
SW84
SW104
D80
REF**
D16
D101
R5
D50
SW83
D4
SW98
SW59
D48
D103
SW23
D62
REF**
J2
D66
D25
SW51
D96
U2
C8
SW37B1
D102
SW41
SW64
SW18
SW28
SW37B1
D64
SW80
D69
D75
D104
D12
SW82
SW32
SW1
D35
C10
D38
SW79
SW48
SW96
D53
SW44
D71
SW94
SW15
D65
D56
D99
SW54
R2
SW19
SW27
SW70
D31
D81
SW49
D10
SW88
C9
SW16
D2
D22
D43
SW10
R3
D54
D6
D89
D26
SW95
SW73
R1
D11
D94
D41
D79
D60
D28
SW67
SW69
SW2
D7
D36
SW5
SW7
C12
D108
D111
D110
D106
D109
C13
D107
D112
D113
footprints = myboard.GetFootprints()
printf(footprints[0])
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'printf' is not defined
print(footprints[0])
<pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C36F0> >
print(footprints[0].GetReference())
D88
print(footprints[0].fp_id)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
AttributeError: 'FOOTPRINT' object has no attribute 'fp_id'
selected = [x.GetReference() for x in myboard.GetFootprints() if x.IsSelected()]
print(selected)
['D15']
for fp in footprints:
    if fp.ref == selected:
        ref_fp = fp
        print(ref_fp)
...
  File "<input>", line 5
    ...
    ^
SyntaxError: invalid syntax
for fp in footprints:
    if fp.ref == selected:
        ref_fp = fp
        print(ref_fp)
    fi
...
  File "<input>", line 6
    ...
    ^
SyntaxError: invalid syntax
for fp in footprints:
    if fp.ref == selected:
        ref_fp = fp
        print(ref_fp)
        
        
Traceback (most recent call last):
  File "<input>", line 2, in <module>
AttributeError: 'FOOTPRINT' object has no attribute 'ref'
for fp in footprints:
            try:
                sheet_file = fp.GetProperty('Sheetfile')
                # construct a list of all the footprints
                mod_named_tuple = Footprint(fp=fp,
                                            fp_id=self.get_footprint_id(fp),
                                            sheet_id=self.get_sheet_path(fp)[0],
                                            filename=self.get_sheet_path(fp)[1],
                                            ref=fp.GetReference())
                self.footprints.append(mod_named_tuple)
            except KeyError:
                pass
        pass
  File "<input>", line 13
    pass
        ^
IndentationError: unindent does not match any outer indentation level
fp_list = []
for fp in footprints:
    try:
        named_tuple = Footprint(fp=fp,fp_id=self.get_footprint_id(fp),sheet_id=self.get_sheet_path(fp)[0],filename=self.get_sheet_path(fp)[1],ref=fpGetReference())
        fp_list.append(named_tuple)
  File "<input>", line 1
    fp_list = []
                ^
SyntaxError: multiple statements found while compiling a single statement
fp_list = []
for fp in footprints:
    try:
        named_tuple = Footprint(fp=fp,fp_id=self.get_footprint_id(fp),sheet_id=self.get_sheet_path(fp)[0],filename=self.get_sheet_path(fp)[1],ref=fpGetReference())
        fp_list.append(named_tuple)
    except KeyError:
        pass
pass
  File "<input>", line 7
    pass
    ^
SyntaxError: invalid syntax
for fp in footprints:
    try:
        named_tuple = Footprint(fp=fp,fp_id=self.get_footprint_id(fp),sheet_id=self.get_sheet_path(fp)[0],filename=self.get_sheet_path(fp)[1],ref=fpGetReference())
        fp_list.append(named_tuple)
    except KeyError:
        pass
        
        
Traceback (most recent call last):
  File "<input>", line 3, in <module>
NameError: name 'Footprint' is not defined
for fp in footprints:
    if fp.GetReference() == selected:
        path = footprint.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
            
            
print(fp_id)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'fp_id' is not defined
fp_id = ""
for fp in footprints:
    if fp.GetReference() == selected:
        path = footprint.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
            
            
print(fp_id)

for fp in footprints:
    if fp.GetReference() == selected:
        path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
            
            
print(fp_id)

for fp in footprints:
    if fp.GetReference() == selected:
        path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
            
for fp in footprints:
    if fp.GetReference() == selected:
        path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
        print(fp.GetReference())
        
        

for fp in footprints:
    if fp.GetReference() == selected:
        path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
    print(fp.GetReference())
    
    
D88
SW52
D83
D47
C4
SW91
SW65
SW14
SW53
D42
D78
SW4
SW25
D45
D23
D33
C11
SW36
D24
SW37
SW33
SW74
REF**
D5
D90
SW81
D86
SW13
SW92
D15
D70
SW93
D114
D63
SW72
D93
SW58
D29
D40
D84
SW76
D3
REF**
D37
D95
D52
SW21
D76
SW90
D39
J1
D1
D46
SW85
D55
D21
SW17
D34
SW57
SW43
D98
SW12
SW38
SW47
D92
D58
D8
SW97
SW35
SW102
D18
D74
SW56
SW34
SW11
D91
SW103
SW45
D73
D49
D32
SW78
C7
SW46
D44
D87
SW66
REF**
SW42
SW55
D51
SW61
C6
R4
D61
D14
SW101
D20
D97
SW9
D67
SW50
D59
C5
SW68
SW63
SW77
C3
D77
SW6
C1
D30
C2
D57
SW89
SW86
SW3
REF**
SW75
SW40
D27
D85
SW39
SW8
SW87
D19
SW31
D82
D100
U1
D17
SW20
SW62
SW71
SW99
D115
D9
D105
SW29
D72
D68
SW24
SW60
SW22
D13
SW26
SW30
SW100
SW84
SW104
D80
REF**
D16
D101
R5
D50
SW83
D4
SW98
SW59
D48
D103
SW23
D62
REF**
J2
D66
D25
SW51
D96
U2
C8
SW37B1
D102
SW41
SW64
SW18
SW28
SW37B1
D64
SW80
D69
D75
D104
D12
SW82
SW32
SW1
D35
C10
D38
SW79
SW48
SW96
D53
SW44
D71
SW94
SW15
D65
D56
D99
SW54
R2
SW19
SW27
SW70
D31
D81
SW49
D10
SW88
C9
SW16
D2
D22
D43
SW10
R3
D54
D6
D89
D26
SW95
SW73
R1
D11
D94
D41
D79
D60
D28
SW67
SW69
SW2
D7
D36
SW5
SW7
C12
D108
D111
D110
D106
D109
C13
D107
D112
D113
print(selected)
['D15']
selected
['D15']
selected[0]
'D15'
for fp in footprints:
    if fp.GetReference() == selected[0]:
        path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
        if len(path) != 1:
            fp_id = path[-1]
        print(fp.GetReference())
        
        
D15
print(fp_id)
D51D642D-4C52-4D3C-BA63-D62449DDB306
def get_fp_id(fp):
    path = fp.GetPath().AsString().upper().replace('00000000-0000-0000-0000-0000', '').split("/")
    if len(path) != 1:
        fp_id = path[-1]
    else:
        fp_id = None
    return fp_id
    
    
for fp in footprints:
    if get_fp_id(fp) == fp_id:
        print(fp.GetReference())
       
       
        
D15
def get_fp_diode(footprints):
    diode_list = []
            
            
            
diode_list = []
for fp in footprints:
    ref = fp.GetReference()
    if ref[0] == 'D':
        diode_list.append(fp)
        
        
print(diode_list)
[<pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C36F0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C35A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3780> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3B10> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3AE0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3DE0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3DB0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643C3F00> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021864308600> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218643083C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021864308090> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021864308630> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021864308480> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021864308BD0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CD84E0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CD8210> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CD8090> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C7B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C960> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329CB40> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C1E0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C5A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329CF60> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C420> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C360> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002186329C060> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCE4B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCEBA0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCE570> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCE1E0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCE180> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021865CCE030> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033270> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033300> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033390> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060335D0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033660> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060338A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033A50> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033AE0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033BD0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033E10> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806033EA0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F1B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F3F0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F480> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F5A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F630> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F750> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603F870> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603FBD0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603FD80> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180603FEA0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F300> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F390> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F5D0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F6F0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F780> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604F8A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604FB70> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604FC00> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604FC90> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604FDB0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x000002180604FE40> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060350C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035420> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035540> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060355D0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060356F0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035810> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060359C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035A50> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035B70> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035D20> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035DB0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806035ED0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034150> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060344B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060345D0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034660> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060346F0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034780> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060349C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034AE0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034D20> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034E40> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806034FC0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060310C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031150> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060314B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031540> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031660> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060318A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031930> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060319C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031B70> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031C00> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031C90> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031D20> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031F60> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806031FC0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060410C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041150> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060411E0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041270> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060414B0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041540> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041780> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041810> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060418A0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041930> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x00000218060419C0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041AE0> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041B70> >, <pcbnew.FOOTPRINT; proxy of <Swig Object of type 'std::deque< FOOTPRINT * >::value_type' at 0x0000021806041C00> >]
for fp in diode_list:
    print(fp.GetReference())
    
    
D88
D83
D47
D42
D78
D45
D23
D33
D24
D5
D90
D86
D15
D70
D114
D63
D93
D29
D40
D84
D3
D37
D95
D52
D76
D39
D1
D46
D55
D21
D34
D98
D92
D58
D8
D18
D74
D91
D73
D49
D32
D44
D87
D51
D61
D14
D20
D97
D67
D59
D77
D30
D57
D27
D85
D19
D82
D100
D17
D115
D9
D105
D72
D68
D13
D80
D16
D101
D50
D4
D48
D103
D62
D66
D25
D96
D102
D64
D69
D75
D104
D12
D35
D38
D53
D71
D65
D56
D99
D31
D81
D10
D2
D22
D43
D54
D6
D89
D26
D11
D94
D41
D79
D60
D28
D7
D36
D108
D111
D110
D106
D109
D107
D112
D113
diode_list.sort
<built-in method sort of list object at 0x000002180024B740>
diode_list.sort()
for fp in diode_list print(fp.GetReference())
  File "<input>", line 1
    for fp in diode_list print(fp.GetReference())
                         ^
SyntaxError: invalid syntax
for fp in diode_list: print(fp.GetReference())

D88
D83
D47
D42
D78
D45
D23
D33
D24
D5
D90
D86
D15
D70
D114
D63
D93
D29
D40
D84
D3
D37
D95
D52
D76
D39
D1
D46
D55
D21
D34
D98
D92
D58
D8
D18
D74
D91
D73
D49
D32
D44
D87
D51
D61
D14
D20
D97
D67
D59
D77
D30
D57
D27
D85
D19
D82
D100
D17
D115
D9
D105
D72
D68
D13
D80
D16
D101
D50
D4
D48
D103
D62
D66
D25
D96
D102
D64
D69
D75
D104
D12
D35
D38
D53
D71
D65
D56
D99
D31
D81
D10
D2
D22
D43
D54
D6
D89
D26
D11
D94
D41
D79
D60
D28
D7
D36
D108
D111
D110
D106
D109
D107
D112
D113
diode_list.sort()
for fp in diode_list:
    print(fp.GetReference())
    
    
D88
D83
D47
D42
D78
D45
D23
D33
D24
D5
D90
D86
D15
D70
D114
D63
D93
D29
D40
D84
D3
D37
D95
D52
D76
D39
D1
D46
D55
D21
D34
D98
D92
D58
D8
D18
D74
D91
D73
D49
D32
D44
D87
D51
D61
D14
D20
D97
D67
D59
D77
D30
D57
D27
D85
D19
D82
D100
D17
D115
D9
D105
D72
D68
D13
D80
D16
D101
D50
D4
D48
D103
D62
D66
D25
D96
D102
D64
D69
D75
D104
D12
D35
D38
D53
D71
D65
D56
D99
D31
D81
D10
D2
D22
D43
D54
D6
D89
D26
D11
D94
D41
D79
D60
D28
D7
D36
D108
D111
D110
D106
D109
D107
D112
D113
def sortByRef(e):
    return e.GetReference()
    
    
diode_list.sort(key=sortByRef)
for fp in diode_list:
    print(fp.GetReference())
    
    
D1
D10
D100
D101
D102
D103
D104
D105
D106
D107
D108
D109
D11
D110
D111
D112
D113
D114
D115
D12
D13
D14
D15
D16
D17
D18
D19
D2
D20
D21
D22
D23
D24
D25
D26
D27
D28
D29
D3
D30
D31
D32
D33
D34
D35
D36
D37
D38
D39
D4
D40
D41
D42
D43
D44
D45
D46
D47
D48
D49
D5
D50
D51
D52
D53
D54
D55
D56
D57
D58
D59
D6
D60
D61
D62
D63
D64
D65
D66
D67
D68
D69
D7
D70
D71
D72
D73
D74
D75
D76
D77
D78
D79
D8
D80
D81
D82
D83
D84
D85
D86
D87
D88
D89
D9
D90
D91
D92
D93
D94
D95
D96
D97
D98
D99
def sortByRefNew(e):
    ref = e.GetReference()
    return int(ref[1:])
    
    
diode_list.sort(key=sortByRefNew)
for fp in diode_list:
    print(fp.GetReference())
    
    
D1
D2
D3
D4
D5
D6
D7
D8
D9
D10
D11
D12
D13
D14
D15
D16
D17
D18
D19
D20
D21
D22
D23
D24
D25
D26
D27
D28
D29
D30
D31
D32
D33
D34
D35
D36
D37
D38
D39
D40
D41
D42
D43
D44
D45
D46
D47
D48
D49
D50
D51
D52
D53
D54
D55
D56
D57
D58
D59
D60
D61
D62
D63
D64
D65
D66
D67
D68
D69
D70
D71
D72
D73
D74
D75
D76
D77
D78
D79
D80
D81
D82
D83
D84
D85
D86
D87
D88
D89
D90
D91
D92
D93
D94
D95
D96
D97
D98
D99
D100
D101
D102
D103
D104
D105
D106
D107
D108
D109
D110
D111
D112
D113
D114
D115
def fp_set_highlight(fp):
    pads_list = fp.Pads()
    for pad in pads_list:
        pad.SetBrightened()
    drawings = fp.GraphicalItems()
    for item in drawings:
        item.SetBrightened()
        
        


for i in range(diode_list):
    fp_set_highlight(diode_list[i])
    i = i + 17
    
    
Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
for col in range(0,105):
    fp_set_highlight(diode_list[col])
    col = col + 17
    
    
pcbnew.Refresh()
for col in range(0,105):
    print(diode_list[col].GetReference())
    col = col + 17
    
    
D1
D2
D3
D4
D5
D6
D7
D8
D9
D10
D11
D12
D13
D14
D15
D16
D17
D18
D19
D20
D21
D22
D23
D24
D25
D26
D27
D28
D29
D30
D31
D32
D33
D34
D35
D36
D37
D38
D39
D40
D41
D42
D43
D44
D45
D46
D47
D48
D49
D50
D51
D52
D53
D54
D55
D56
D57
D58
D59
D60
D61
D62
D63
D64
D65
D66
D67
D68
D69
D70
D71
D72
D73
D74
D75
D76
D77
D78
D79
D80
D81
D82
D83
D84
D85
D86
D87
D88
D89
D90
D91
D92
D93
D94
D95
D96
D97
D98
D99
D100
D101
D102
D103
D104
D105
for i in range(0,105,17):
    print(diode_list[i].GetReference())
    
    
D1
D18
D35
D52
D69
D86
D103
for i in range(0,105,18):
    print(diode_list[i].GetReference())
    .
    
  File "<input>", line 3
    .
    ^
SyntaxError: invalid syntax
for i in range(0,105,18):
    print(diode_list[i].GetReference())
    
    
D1
D19
D37
D55
D73
D91
for i in range(0,105,18):
    fp_set_highlight(diode_list[i])
    
pcbnew.Refresh()
def fp_clear_highlight(fp):
    pads_list = fp.Pads()
    for pad in pads_list:
        pad.ClearBrightened()
    drawings = fp.GraphicalItems()
    for item in drawings:
        item.ClearBrightened()
        
for fp in diode_list:
    fp_clear_highlight(fp)
    
pcbnew.Refresh()
for i in range(0,105,18):
    fp_set_highlight(diode_list[i])
    
pcbnew.Refresh()
def place_linear(footprints_to_place, reference_footprint, step_x, step_y, step, rotation):
    # get proper footprint list
    footprints = []
    for fp in footprints_to_place:
        footprints.append(fp)

    ref_fp = footprints_to_place[0]

    # get reference footprint position
    ref_fp_pos = ref_fp.fp.GetPosition()
    ref_fp_index = footprints.index(ref_fp)

    for fp in footprints:
        index = footprints.index(fp)
        delta_index = index-ref_fp_index

        if fp.fp.IsFlipped() != ref_fp.fp.IsFlipped():
            fp.fp.Flip(fp.fp.GetPosition(), False)

        new_position = (ref_fp_pos.x + delta_index*step_x*SCALE, ref_fp_pos.y + delta_index*step_y * SCALE)
        new_position = [int(x) for x in new_position]
        fp.fp.SetPosition(pcbnew.wxPoint(*new_position))
        footprint_angle = ref_fp.fp.GetOrientationDegrees()
        footprint_angle = footprint_angle + index // step * rotation
        fp.fp.SetOrientationDegrees(footprint_angle)
        
fp_to_place = []
for i in range(0,105,18):
    fp_to_place.append(diode_list[i])
    
place_linear(fp_to_place, fp_to_place[0], 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "<input>", line 10, in place_linear
AttributeError: 'FOOTPRINT' object has no attribute 'fp'
def place_linear(footprints_to_place, reference_footprint, step_x, step_y, step, rotation, copy_text_items):
        # get proper footprint list
        footprints = []
        for fp in footprints_to_place:
            footprints.append(fp)

        ref_fp = footprints_to_place

        # get reference footprint position
        ref_fp_pos = ref_fp.GetPosition()
        ref_fp_index = footprints.index(ref_fp)

        for fp in footprints:
            index = footprints.index(fp)
            delta_index = index-ref_fp_index

            if fp.fp.IsFlipped() != ref_fp.IsFlipped():
                fp.fp.Flip(fp.fp.GetPosition(), False)

            new_position = (ref_fp_pos.x + delta_index*step_x*SCALE, ref_fp_pos.y + delta_index*step_y * SCALE)
            new_position = [int(x) for x in new_position]
            fp.fp.SetPosition(pcbnew.wxPoint(*new_position))
            footprint_angle = ref_fp.GetOrientationDegrees()
            footprint_angle = footprint_angle + index // step * rotation
            fp.fp.SetOrientationDegrees(footprint_angle)
            

place_linear(fp_to_place, fp_to_place[0], 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: place_linear() missing 1 required positional argument: 'copy_text_items'
def place_linear(footprints_to_place, step_x, step_y, step, rotation):
    # get proper footprint list
    footprints = []
    for fp in footprints_to_place:
        footprints.append(fp)

    ref_fp = footprints_to_place

    # get reference footprint position
    ref_fp_pos = ref_fp.GetPosition()
    ref_fp_index = footprints.index(ref_fp)

    for fp in footprints:
        index = footprints.index(fp)
        delta_index = index-ref_fp_index

        if fp.fp.IsFlipped() != ref_fp.IsFlipped():
            fp.fp.Flip(fp.fp.GetPosition(), False)

        new_position = (ref_fp_pos.x + delta_index*step_x*SCALE, ref_fp_pos.y + delta_index*step_y * SCALE)
        new_position = [int(x) for x in new_position]
        fp.fp.SetPosition(pcbnew.wxPoint(*new_position))
        footprint_angle = ref_fp.GetOrientationDegrees()
        footprint_angle = footprint_angle + index // step * rotation
        fp.fp.SetOrientationDegrees(footprint_angle)
        
place_linear(fp_to_place, 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "<input>", line 10, in place_linear
AttributeError: 'list' object has no attribute 'GetPosition'
def place_linear(footprints_to_place, step_x, step_y, step, rotation):
    # get proper footprint list
    footprints = []
    for fp in footprints_to_place:
        footprints.append(fp)

    ref_fp = footprints_to_place[0]

    # get reference footprint position
    ref_fp_pos = ref_fp.GetPosition()
    ref_fp_index = footprints.index(ref_fp)

    for fp in footprints:
        index = footprints.index(fp)
        delta_index = index-ref_fp_index

        if fp.fp.IsFlipped() != ref_fp.IsFlipped():
            fp.fp.Flip(fp.fp.GetPosition(), False)

        new_position = (ref_fp_pos.x + delta_index*step_x*SCALE, ref_fp_pos.y + delta_index*step_y * SCALE)
        new_position = [int(x) for x in new_position]
        fp.fp.SetPosition(pcbnew.wxPoint(*new_position))
        footprint_angle = ref_fp.GetOrientationDegrees()
        footprint_angle = footprint_angle + index // step * rotation
        fp.fp.SetOrientationDegrees(footprint_angle)
        
place_linear(fp_to_place, 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "<input>", line 17, in place_linear
AttributeError: 'FOOTPRINT' object has no attribute 'fp'
def place_linear(footprints_to_place, step_x, step_y, step, rotation):
    # get proper footprint list
    footprints = []
    for fp in footprints_to_place:
        footprints.append(fp)

    ref_fp = footprints_to_place[0]

    # get reference footprint position
    ref_fp_pos = ref_fp.GetPosition()
    ref_fp_index = footprints.index(ref_fp)

    for fp in footprints:
        index = footprints.index(fp)
        delta_index = index-ref_fp_index

        if fp.IsFlipped() != ref_fp.IsFlipped():
            fp.Flip(fp.GetPosition(), False)

        new_position = (ref_fp_pos.x + delta_index*step_x*SCALE, ref_fp_pos.y + delta_index*step_y * SCALE)
        new_position = [int(x) for x in new_position]
        fp.SetPosition(pcbnew.wxPoint(*new_position))
        footprint_angle = ref_fp.GetOrientationDegrees()
        footprint_angle = footprint_angle + index // step * rotation
        fp.SetOrientationDegrees(footprint_angle)
        
place_linear(fp_to_place, 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "<input>", line 20, in place_linear
NameError: name 'SCALE' is not defined
SCALE = 1000000.0
place_linear(fp_to_place, 3, 0, 0, 0)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "<input>", line 24, in place_linear
ZeroDivisionError: integer division or modulo by zero
place_linear(fp_to_place, 3, 0, 1, 0)
pcbnew.Refresh()
