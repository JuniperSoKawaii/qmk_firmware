tuesdayjohn favorite

https://github.com/qmk/qmk_firmware/tree/master/users/ericgebhart very detailed and involved...contains caps_word code

    [TD_ESC_CAPS]  = ACTION_TAP_DANCE_DOUBLE(KC_ESC, KC_CAPS),
    [TD_TAB_BKTAB] = ACTION_TAP_DANCE_DOUBLE(KC_TAB, LSFT(KC_TAB)),
    [TD_RIGHT_TAB] = ACTION_TAP_DANCE_DOUBLE(KC_RIGHT, KC_TAB),
    [TD_LEFT_BACKTAB] = ACTION_TAP_DANCE_DOUBLE(KC_LEFT, LSFT(KC_TAB)),
    [TD_UP_HOME] = ACTION_TAP_DANCE_DOUBLE(KC_UP, KC_HOME),
    [TD_DOWN_END] = ACTION_TAP_DANCE_DOUBLE(KC_DOWN, KC_END)
    [TD_HOME_END]  = ACTION_TAP_DANCE_DOUBLE(KC_HOME, KC_END),



    // Caps Word, activated by pressing both shift keys at the same time.
//
// This library implements "Caps Word", which is like conventional Caps Lock,
// but automatically disables itself at the end of the word. This is useful for
// typing all-caps identifiers like `MOD_MASK_ALT`.
//
// Caps Word is activated by pressing the left and right shift keys at the same
// time. This way you don't need a dedicated key for using Caps Word. I've
// tested that this works as expected with one-shot mods and Space Cadet Shift.
// If your shift keys are mod-taps, activate Caps Word by holding both shift
// mod-tap keys until the tapping term, release them, then begin typing.
//
// For full documentation, see
// https://getreuer.info/posts/keyboards/caps-word




# Cap Words https://github.com/qmk/qmk_firmware/blob/c4551d7ef1ed2c1069f23cc8499b7c7fc30f3ecf/users/drashna/keyrecords/capwords.md

This is taken from [Pascal Getreuer's implemenation](https://getreuer.info/posts/keyboards/caps-word/index.html), with a number of modifications. 

To enable Caps Word, add `CAPS_WORD_ENABLE = yes` to your `rules.mk`.



/* _SYMB2ol level, more ergodox like
*
* ,-------------------------------------------------------------------------------------------------------------------.
* |        |      |      |      |      |      |      |      |      |      |      |      |      |      |      |        |
* |--------+------+------+------+------+------+---------------------------+------+------+------+------+------+--------|
* |        |      |   *  |   #  |      |      |                           |      |      |      |      |      |        |
* |--------+------+------+------+------+------|                           +------+------+------+------+------+--------|
* |        |  /   |   <  |   >  |      |      |                           |      |      |   +  |   *  |      |        |
* |--------+------+------+------+------+------|                           |------+------+------+------+------+--------|
* |        |      |  {   |   }  |      |      |                           |      |      |   =  |   -  |      |        |
* |--------+------+------+------+------+------|                           |------+------+------+------+------+--------|
* |        |   =  |  (   |   )  |      |      |                           |      |      |      |   |  |      |        |
* `--------+------+------+------+------+-------                           `------+------+------+------+------+--------'
*          |      |      |GUI/L |L1/RT |                                         | L1/UP|GUI/DN|  {   |   }  |
*          `---------------------------'                                         `---------------------------'
*                                        ,-------------.         ,-------------.
*                                        | CTRL |      |         | ALT  | GUI |
*                                 ,------|------|------|         |------+------+------.
*                                 |      |      |      |         |      |      |      |
*                                 | BkSp | Del  |------|         |------|Mouse1|Mouse2|
*                                 |      |      |Reset |         |      |LClick|Rclick|
*                                 `--------------------'         `--------------------'
*/



[_SYMB2] = LAYOUT(
         _______,  _______,  _______,  _______,  _______,  _______, _______, _______, _______,
         _______,  _______,  KC_ASTR,  KC_HASH,  _______,  _______,
         _______,  KC_SLSH,  RSFT(KC_COMM), RSFT(KC_DOT),  _______,  _______,
         _______,  _______,  RSFT(KC_LBRC),  RSFT(KC_RBRC),   _______,  _______,
         _______,  KC_EQL,  RSFT(KC_9),  RSFT(KC_0),  _______,  _______,
                   _______,  _______,  MT(MOD_LGUI,KC_LEFT), LT(_SYMB, KC_RIGHT),
                             _______,  _______,
                                       _______,
                    _______, _______,  RESET,
         _______,  _______,  _______,  _______,  _______,  _______, _______, TT(_MOUSE), KC_2,
         _______,  _______,  _______,  KC_ASTR,  _______,  _______,
         _______,  _______,  KC_PLUS,  KC_MINS,  _______,  _______,
         _______,  _______,  KC_EQL,  KC_PIPE,  _______,  _______,
         _______,  _______,  _______,  _______,  _______,  _______,
                   LT(_SYMB, KC_UP), MT(MOD_LGUI,KC_DOWN),   _______,  _______,
         _______,  _______,
         _______,
         _______,  _______,  _______
    ),


    /* Keymap 1: Symbol Layer
 *
 * ,--------------------------------------------------.           ,--------------------------------------------------.
 * |        |      |      |      |      |      |      |           |      |      |      |  K/  |  K*  |  K-  |   =    |
 * |--------+------+------+------+------+-------------|           |------+------+------+------+------+------+--------|
 * |        |   !  |   @  |   (  |   )  |   |  |      |           |      |      |  K7  |  K8  |  K9  |  K+  |   #    |
 * |--------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |        |   #  |   $  |   {  |   }  |   `  |------|           |------|      |  K4  |  K5  |  K6  |  K+  |   '    |
 * |--------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |        |   %  |   ^  |   [  |   ]  |   ~  |      |           |      |      |  K1  |  K2  |  K3  |  K=  |        |
 * `--------+------+------+------+------+-------------'           `-------------+------+------+------+------+--------'
 *   |      |      |      |      |      |                                       |  K0  |  K0  |  K.  |  K=  |      |
 *   `----------------------------------'                                       `----------------------------------'
 *                                        ,-------------.       ,-------------.
 *                                        |      |      |       |      |      |
 *                                 ,------|------|------|       |------+------+------.
 *                                 |      |      |  L2  |       |  L2  |      |      |
 *                                 |      |      |------|       |------|      |      |
 *                                 |      |      |      |       |      |      |      |
 *                                 `--------------------'       `--------------------'
 */
// PROGRAMMING
[PROG] = LAYOUT_ergodox(
       // left hand
       KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
       KC_TRNS, KC_EXLM, KC_AT,   KC_LCBR, KC_RCBR, KC_PIPE, KC_TRNS,
       KC_TRNS, KC_HASH, KC_DLR,  KC_LPRN, KC_RPRN, KC_GRV,
       KC_TRNS, KC_PERC, KC_CIRC, KC_LBRC, KC_RBRC, KC_TILD, KC_TRNS,
       KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
                                        KC_TRNS, KC_TRNS,
                                      TO(NAVI),
                               KC_TRNS, KC_TRNS, KC_TRNS,
       // right hand
       KC_TRNS, KC_TRNS, KC_NO,  KC_PSLS, KC_PAST, KC_PMNS, KC_EQUAL,
       KC_TRNS, KC_TRNS, KC_P7,  KC_P8,   KC_P9,   KC_PPLS, KC_NUHS,
                KC_TRNS, KC_P4,  KC_P5,   KC_P6,   KC_PPLS, KC_QUOT,
       KC_TRNS, KC_TRNS, KC_P1,  KC_P2,   KC_P3,   KC_PENT, KC_TRNS,
                         KC_P0,  KC_P0,   KC_PDOT, KC_PENT, KC_TRNS,
       KC_TRNS, KC_TRNS,
       TO(NAVI),
       KC_TRNS, KC_TRNS, KC_TRNS
),



/*
const keypos_t PROGMEM hand_swap_config[MATRIX_ROWS][MATRIX_COLS] = {
    {{11, 0},  {11, 1},  {11, 2},  {11, 3},   ___,     ___,     ___   }, \
    {{10, 0},  {10, 1},  {10, 2},  {10, 3},  {10, 4},  ___,     ___   }, \
    {{9, 0},   {9, 1},   {9, 2},   {9, 3},   {9, 4},  {6, 6},   ___   }, \
    {{8, 0},   {8, 1},   {8, 2},   {8, 3},   {8, 4},  {8, 6},  {6, 5} }, \
    {{7, 0},   {7, 1},   {7, 2},   {7, 3},    ___,     ___,    {7, 5} }, \
    {{6, 0},   {6, 1},   {6, 2},   {6, 3},   {5, 4},  {9, 6},  {8, 5} }, \
    {{5, 0},   {5, 1},   {5, 2},   {5, 3},   {5, 4},  {3, 6},  {2, 5} }, \
    {{4, 0},   {4, 1},   {4, 2},   {4, 3},    ___,    {4, 6},   ___   }, \
    {{3, 0},   {3, 1},   {3, 2},   {3, 3},   {3, 4},  {5, 6},  {3, 5} }, \
    {{2, 0},   {2, 1},   {2, 2},   {2, 3},   {2, 4},   ___,    {5, 5} }, \
    {{1, 0},   {1, 1},   {1, 2},   {1, 3},   {1, 4},   ___,     ___ }, \
    {{0, 0},   {0, 1},   {0, 2},   {0, 3},    ___,     ___,     ___ }, \
    {{12, 0},  {12, 1},  {12, 2},  {12, 3},  {12, 4},  {12, 5},   ___ }, \
    {{13, 0},  {13, 1},  {13, 2},  {13, 3},  {13, 4},  {13, 5},   ___ }, \
    {{14, 0},  {14, 1},  {14, 2},  {14, 3},  {14, 4},  {14, 5},   ___ }  \
};

*/


// Default mapping of keys
/*
{                                              \
    { {0,0},  {0,1},  {0,2},  {0,3}, }, \
    { {1,0},  {1,1},  {1,2},  {1,3},  {1,4}, }, \
    { {2,0},  {2,1},  {2,2},  {2,3},  {2,4},  {2,5}, }, \
    { {3,0},  {3,1},  {3,2},  {3,3},  {3,4},  {3,5},  {3,6} }, \
    { {4,0},  {4,1},  {4,2},  {4,3}, {4,6} }, \
    { {5,0},  {5,1},  {5,2},  {5,3},  {5,4},  {5,5},  {5,6} }, \
    { {6,0},  {6,1},  {6,2},  {6,3},  {6,4},  {6,5},  {6,6} }, \
    { {7,0},  {7,1},  {7,2},  {7,3},    {7,5}, }, \
    { {8,0},  {8,1},  {8,2},  {8,3},  {8,4},  {8,5},  {8,6} }, \
    { {9,0},  {9,1},  {9,2},  {9,3},  {9,4},    {9,6} }, \
    { {10,0},  {10,1},  {10,2},  {10,3},  {10,4}, }, \
    { {11,0},  {11,1},  {11,2},  {11,3}, }, \
    { {12,0},  {12,1},  {12,2},  {12,3},  {12,4},  {12,5},   }, \
    { {13,0},  {13,1},  {13,2},  {13,3},  {13,4},  {13,5},   }, \
    { {14,0},  {14,1},  {14,2},  {14,3},  {14,4},  {14,5},   }  \
};


const keypos_t PROGMEM hand_swap_config[MATRIX_ROWS][MATRIX_COLS] = 
{
    {{11, 0},  {11, 1},  {11, 2},  {11, 3}}, \
    {{10, 0},  {10, 1},  {10, 2},  {10, 3},  {10, 4}}, \
    {{9, 0},   {9, 1},   {9, 2},   {9, 3},   {9, 4},  {6, 6}}, \
    {{8, 0},   {8, 1},   {8, 2},   {8, 3},   {8, 4},  {8, 6},  {6, 5}}, \
    {{7, 0},   {7, 1},   {7, 2},   {7, 3}, {7, 5}}, \
    {{6, 0},   {6, 1},   {6, 2},   {6, 3},   {5, 4},  {9, 6},  {8, 5}}, \
    {{5, 0},   {5, 1},   {5, 2},   {5, 3},   {5, 4},  {3, 6},  {2, 5}}, \
    {{4, 0},   {4, 1},   {4, 2},   {4, 3},  {4, 6}}, \
    {{3, 0},   {3, 1},   {3, 2},   {3, 3},   {3, 4},  {5, 6},  {3, 5}}, \
    {{2, 0},   {2, 1},   {2, 2},   {2, 3},   {2, 4},  {5, 5}}, \
    {{1, 0},   {1, 1},   {1, 2},   {1, 3},   {1, 4}}, \
    {{0, 0},   {0, 1},   {0, 2},   {0, 3}}, \
    {{12, 0},  {12, 1},  {12, 2},  {12, 3},  {12, 4},  {12, 5}}, \
    {{13, 0},  {13, 1},  {13, 2},  {13, 3},  {13, 4},  {13, 5}}, \
    {{14, 0},  {14, 1},  {14, 2},  {14, 3},  {14, 4},  {14, 5}}  \


    { {0,0},  {1,0},  {2,0},  {3,0}, }, \(
    { {0,1},  {1,1},  {2,1},  {3,1},  {4,1}, }, \
    { {0,2},  {1,2},  {2,2},  {3,2},  {4,2},  {5,2}, }, \
    { {0,3},  {1,3},  {2,3},  {3,3},  {4,3},  {5,3},  {6,3} }, \
    { {0,4},  {1,4},  {2,4},  {3,4}, {6,4} }, \
    { {0,5},  {1,5},  {2,5},  {3,5},  {4,5},  {5,5},  {6,5} }, \
    { {0,6},  {1,6},  {2,6},  {3,6},  {4,6},  {5,6},  {6,6} }, \
    { {0,7},  {1,7},  {2,7},  {3,7},    {5,7}, }, \
    { {0,8},  {1,8},  {2,8},  {3,8},  {4,8},  {5,8},  {6,8} }, \
    { {0,9},  {1,9},  {2,9},  {3,9},  {4,9},    {6,9} }, \
    { {0,10},  {1,10},  {2,10},  {3,10},  {4,10}, }, \
    { {0,11},  {1,11},  {2,11},  {3,11}, }, \
    { {0,12},  {1,12},  {2,12},  {3,12},  {4,12},  {5,12},   }, \
    { {0,13},  {1,13},  {2,13},  {3,13},  {4,13},  {5,13},   }, \
    { {0,14},  {1,14},  {2,14},  {3,14},  {4,14},  {5,14},   }  \)
};
*/

/*
{
    {{((11)), 0},  {(11), 1},  {(11), 2},  {(11), 3}}, \
    {{(10), 0},  {(10), 1},  {(10), 2},  {(10), 3},  {(10), 4}}, \
    {{9, 0},   {9, 1},   {9, 2},   {9, 3},   {9, 4},  {6, 6}}, \
    {{8, 0},   {8, 1},   {8, 2},   {8, 3},   {8, 4},  {8, 6},  {6, 5}}, \
    {{7, 0},   {7, 1},   {7, 2},   {7, 3}, {7, 5}}, \
    {{6, 0},   {6, 1},   {6, 2},   {6, 3},   {5, 4},  {9, 6},  {8, 5}}, \
    {{5, 0},   {5, 1},   {5, 2},   {5, 3},   {5, 4},  {3, 6},  {2, 5}}, \
    {{4, 0},   {4, 1},   {4, 2},   {4, 3},  {4, 6}}, \
    {{3, 0},   {3, 1},   {3, 2},   {3, 3},   {3, 4},  {5, 6},  {3, 5}}, \
    {{2, 0},   {2, 1},   {2, 2},   {2, 3},   {2, 4},  {5, 5}}, \
    {{1, 0},   {1, 1},   {1, 2},   {1, 3},   {1, 4}}, \
    {{0, 0},   {0, 1},   {0, 2},   {0, 3}}, \
    {{(12), 0},  {(12), 1},  {(12), 2},  {(12), 3},  {(12), 4},  {(12), 5}}, \
    {{(13), 0},  {(13), 1},  {(13), 2},  {(13), 3},  {(13), 4},  {(13), 5}}, \
    {{(14), 0},  {(14), 1},  {(14), 2},  {(14), 3},  {(14), 4},  {(14), 5}}  \
};
*/